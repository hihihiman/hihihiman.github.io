<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>DS - 标签 -</title><link>https://leni.fun/tags/ds.html</link><description>DS - 标签 -</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 08 Aug 2023 16:06:32 +0800</lastBuildDate><atom:link href="https://leni.fun/tags/ds.html" rel="self" type="application/rss+xml"/><item><title>🚩经典股票问题 - 动态规划思路</title><link>https://leni.fun/posts/%E7%BB%8F%E5%85%B8%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%9D%E8%B7%AF.html</link><pubDate>Tue, 08 Aug 2023 16:06:32 +0800</pubDate><author>都将会</author><guid>https://leni.fun/posts/%E7%BB%8F%E5%85%B8%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%9D%E8%B7%AF.html</guid><description>&lt;p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。&lt;/p>
&lt;h4 id="lv1-你只能选择-某一天-买入这只股票并选择在-未来的某一个不同的日子-卖出该股票">lv1. 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。&lt;/h4></description></item><item><title>🚩LeetCode 典中典</title><link>https://leni.fun/posts/leetcode-%E5%85%B8%E4%B8%AD%E5%85%B8.html</link><pubDate>Tue, 08 Aug 2023 15:57:32 +0800</pubDate><author>都将会</author><guid>https://leni.fun/posts/leetcode-%E5%85%B8%E4%B8%AD%E5%85%B8.html</guid><description>这么经典，岂不默写？</description></item><item><title>LFU</title><link>https://leni.fun/posts/lfu.html</link><pubDate>Tue, 08 Aug 2023 15:56:32 +0800</pubDate><author>都将会</author><guid>https://leni.fun/posts/lfu.html</guid><description>跟着 debug 调试一下</description></item><item><title>LeetCode 大全</title><link>https://leni.fun/posts/leetcode.html</link><pubDate>Tue, 08 Aug 2023 15:51:32 +0800</pubDate><author>都将会</author><guid>https://leni.fun/posts/leetcode.html</guid><description>常回来看看</description></item><item><title>🚩DS - 数据结构</title><link>https://leni.fun/posts/ds.html</link><pubDate>Tue, 08 Aug 2023 14:21:51 +0800</pubDate><author>都将会</author><guid>https://leni.fun/posts/ds.html</guid><description><![CDATA[<h3 id="红黑树">红黑树</h3>
<h4 id="什么是红黑树">什么是红黑树？</h4>
<p>自平衡的二叉查找树，在进行插入和删除等可能会破坏树的平衡的操作时，需要重新自处理达到平衡状态。</p>
<ol>
<li>根和叶子节点是黑色的，插入的节点是红色的</li>
<li>叶子节点是空节点。</li>
<li>每个红色节点必有黑色子节点。</li>
<li><strong>任意一结点到每个叶子结点的路径都包含数量相同的黑结点。</strong></li>
</ol>
<p>通过左旋、右旋和变色来实现自平衡：</p>]]></description></item></channel></rss>